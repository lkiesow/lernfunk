/*****************************************************************************/
/* IMPORTANT: DO NOT EDIT THIS FILE!                                         */
/* EDIT THE FILES IN THE SRC FOLDER INSTEAD AND USE THE BUILD SCRIPT TO      */
/* GENERATE THIS FILE                                                        */
/*****************************************************************************/

/* 
	Copyright (c) 2006 - 2010  Universitaet Osnabrueck, virtUOS 
	Authors: Nils Birnbaum, Lars Kiesow, Benjamin Wulff

	This file is part of Lernfunk. 

	Lernfunk is free software: you can redistribute it and/or modify 
	it under the terms of the GNU General Public License as published by 
	the Free Software Foundation, either version 3 of the License, or 
	(at your option) any later version. 

	Lernfunk is distributed in the hope that it will be useful, 
	but WITHOUT ANY WARRANTY; without even the implied warranty of 
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
	GNU General Public License for more details. 

	You should have received a copy of the GNU General Public License 
	along with Lernfunk.  If not, see <http://www.gnu.org/licenses/>. 
*/

/*****************************************************************************/
/*****************************************************************************/
/* Non-editor-specific javascript functions                                  */
/*****************************************************************************/
/*****************************************************************************/

// Request URL
lf_url = "index.php?action=ajax";
searchthread = null;
editortype = '';
open_result = null;
selectwnd_ok_action = '';
current_id = '';
var cal_obj = null;

// HTML to display while loading something
loadingHTML = '<div style="width: 100px; margin-left: auto; margin-right: auto;">'
    + '<div style="height: 100px; position: absolute; margin-top: -50px; top: 50%;">'
    + '<img src="gfx/loading.gif" alt="loading..." />'
    + '</div></div>';

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Initialize search, set window size and resize eventlistener               */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
function init() {
    search(); 
    setSize();
    window.addEventListener('resize', setSize, false);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Fit interface in window                                                   */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
function setSize() {
    $('navigation').style.height = (window.innerHeight - 95) + 'px'; 
    $('stage').style.height = (window.innerHeight - 95) + 'px'; 
    $('bottom_container').style.height = (window.innerHeight - 90) + 'px'; 
    $('main_table').style.width = (window.innerWidth - 10 ) + 'px';
    //$('main_table').setAttribute('style', 'width: ' + window.innerWidth + 'px;');
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* set searchinterval (500ms til search)                                     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
function trigger_search() {
    window.clearInterval(searchthread);
    searchthread = window.setInterval('search();', 500);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Search for series or lecturer                                             */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
function search() {
    searchtext = $('searchbox').value;
    new Ajax.Request( lf_url,{
                      method: "post",
                      onSuccess: function(r) {
                          $('navigation').innerHTML = r.responseText;
                          open_result = null;
                      },
                      parameters: {cmd:"search", search:searchtext}
                    });
    window.clearInterval(searchthread);
    searchthread = null;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load editor for some kind of record                                       */
/*                                                                           */
/* params:                                                                   */
/*   t   {Type of the record. Types are specified in recordtypes.php.}       */
/*   id  {Optional: Identifier of a specified record to load}                */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
function load_editor(t, id) {
    $('stage').innerHTML = loadingHTML;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('stage').innerHTML = r.responseText;
                          editortype = t;
                      },
                      parameters: {cmd:'get_editor', type:t, id:id}
                    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Open/close series attributes in search result                             */
/*                                                                           */
/* params:                                                                   */
/*   id  {identifier of the series}                                          */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
function trigger_result(id) {
    if (open_result != id) {
        if (open_result != null) {
            var element_id = 'info_'+open_result;
            $(element_id).style.display = 'none';
        }
        open_result = id;
        new Ajax.Request( lf_url, {
                          method: 'post',
                          onSuccess: function(r) {
                                var element_id = 'info_'+id;
                                elm = $(element_id);
                                elm.style.display = '';
                                elm.innerHTML = r.responseText;
                          },
                          parameters: {cmd:'get_result_info', id:id}
                         });
    } else if (open_result == id) {
        var element_id = 'info_'+id;
        $(element_id).style.display = 'none';
        open_result = null;
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Show datetime-picker                                                      */
/*                                                                           */
/* params:                                                                   */
/*   el   {element above which the calendar should be shown}                 */
/*   inp  {identifier of the HTML-input element in which the date is posted} */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
function show_cal(el, inp) {

    if (cal_obj) return;

    var format = '%Y-%m-%d %H:%i:%s';
    var text_field = document.getElementById(inp);

    cal_obj = new RichCalendar();
    cal_obj.show_time = true;
    cal_obj.user_onchange_handler = function(cal, object_code) {
            if (object_code == 'day') {
                text_field.value = cal.get_formatted_date(format);
                if (text_field.onchange)
                    text_field.onchange();
                cal.hide();
                cal_obj = null;
            }
        }

    cal_obj.user_onclose_handler = function(cal) {
            cal.hide();
            cal_obj = null;
        }
    cal_obj.user_onautoclose_handler = function(cal) {
            cal_obj = null;
        }

    cal_obj.parse_date(text_field.value, format);

    cal_obj.show_at_element(text_field, "adj_right-top");

}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* ???                                                                       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
function show_select_window(table, text, callback) {
    $('select_window').style.display = 'inline';
    $('select_window_caption').innerHTML = text;
    selectwnd_ok_action = callback + "($('select_window_selector').value);";
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('select_window_selector').innerHTML = r.responseText;
                          $('select_window_ok').disabled = false;
                      },
                      parameters: {cmd:'get_option_list', type:table, supress_none_option:true}
                    } );
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* ???                                                                       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
function hide_select_window() {
    $('select_window_ok').disabled = true;
    $('select_window').style.display = 'none';
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Check whether or not the specicied input contains a valid date            */
/*                                                                           */
/* params:                                                                   */
/*   input_id  {identifier of the input to check}                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
function checkDateFormat(input_id) {
    if (!$(input_id) || !/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/.test($(input_id).value)) {
    // if (isNaN(Date.parse($(input_id).value))) { // << Firefox hate this
        alert('Error: This is not a valid date format!\nCorrect format: YYYY-MM-DD hh:mm:ss');
        $(input_id).value = '';
        $(input_id).focus();
    }
}




/*****************************************************************************/
/*****************************************************************************/
/* Feededitor                                                                */
/*****************************************************************************/
/*****************************************************************************/

feededitor = Class.create();

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load editor for a new feed                                                */
/*                                                                           */
/* params:                                                                   */
/*   series_id  {identifier of the series the feed should be assigned to}    */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
feededitor.add = function(series_id) {
    editortype = 'feed';
    $('stage').innerHTML = loadingHTML;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('stage').innerHTML = r.responseText;
                      },
                      parameters: {cmd:'get_feededitor', series_id:series_id}
                    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load editor for secified feed                                             */
/*                                                                           */
/* params:                                                                   */
/*   feed_id  {identifier of the feed to load}                               */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
feededitor.load = function(feed_id) {
    editortype = 'feed';
    $('stage').innerHTML = loadingHTML;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('stage').innerHTML = r.responseText;
                      },
                      parameters: {cmd:'get_feededitor', feed_id:feed_id}
                    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Save the currently opened feed                                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
feededitor.save = function() {
    var keepSeries = ($('series_id').value == $('old_series_id').value) || ($('old_series_id').value = '');
    if (keepSeries || confirm('Are you shure you want to change the series?')) {
        new Ajax.Request( lf_url, {
                          method: 'post',
                          onSuccess: function(r) {
                                  $('feed_response').innerHTML = r.responseText;
                                  trigger_result($('old_series_id').value);
                                  trigger_result($('series_id').value);
                          },
                          parameters: {cmd:'save_feed', feed_id:$('feed_id').value, feed_url:$('feed_url').value, 
                              series_id:$('series_id').value, feedtype_id:$('feedtype_id').value, 
                              itunes_status:$('itunes_status').value}
        });
        $('feed_response').innerHTML = '<pre>saving feed...</pre>';
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Delete a specified feed.                                                  */
/*                                                                           */
/* params:                                                                   */
/*   feed_id    {identifier of the feed}                                     */
/*   series_id  {identifier of the series, the feed is assigned to}          */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
feededitor.remove = function(feed_id, series_id) {
    if (confirm('Are you shure you want to delete this feed?')) {
        new Ajax.Request( lf_url, {
                          method: 'post',
                          onSuccess: function(r) {
                                  $('stage').innerHTML = r.responseText;
                                  trigger_result(series_id);
                                  trigger_result(series_id);
                          },
                          parameters: {cmd:'delete_feed', feed_id:feed_id}
        });
        $('feed_response').innerHTML = '<pre>deleting feed...</pre>';
    }
}


/*****************************************************************************/
/*****************************************************************************/
/* Mediaobjecteditor                                                         */
/*****************************************************************************/
/*****************************************************************************/

mediaobjecteditor = Class.create();

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load editor for a new feed                                                */
/*                                                                           */
/* params:                                                                   */
/*   series_id  {identifier of the series the feed sould be assigned to}     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
mediaobjecteditor.add = function(series_id) {
    editortype = 'mediaobject';
    $('stage').innerHTML = loadingHTML;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('stage').innerHTML = r.responseText;
                      },
                      parameters: {cmd:'get_empty_mediaobjecteditor', series_id:series_id}
    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load editor for specified mediaobject                                     */
/*                                                                           */
/* params:                                                                   */
/*   object_id  {identifier of the mediaobject to load}                      */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
mediaobjecteditor.load = function(object_id) {
    editortype = 'mediaobject';
    $('stage').innerHTML = loadingHTML;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('stage').innerHTML = r.responseText;
                      },
                      parameters: {cmd:'get_mediaobjecteditor', object_id:object_id}
    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Save currently opened mediaobject                                         */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
mediaobjecteditor.save = function() {
    var keepSeries = ($('series_id').value == $('old_series_id').value) || ($('old_series_id').value = '');
    if (keepSeries || confirm('Are you shure you want to change the series?')) {
        new Ajax.Request( lf_url, {
                          method: 'post',
                          onSuccess: function(r) {
                                  $('mediaobject_response').innerHTML = r.responseText;
                                  trigger_result($('old_series_id').value);
                                  trigger_result($('series_id').value);
                          },
                          parameters: {cmd:'save_mediaobject', record: r = Object.toJSON($('fields').serialize(true))}
        });
        $('mediaobject_response').innerHTML = '<pre>saving feed...</pre>';
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Delete a specified mediaobject                                            */
/*                                                                           */
/* params:                                                                   */
/*   object_id  {identifier of the mediaobject to delete}                    */
/*   series_id  {identifier of the series, the mediaobject is assigned with} */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
mediaobjecteditor.remove = function(object_id, series_id) {
    if (confirm('Are you shure you want to delete this mediaobject?')) {
        new Ajax.Request( lf_url, {
                          method: 'post',
                          onSuccess: function(r) {
                                  $('stage').innerHTML = r.responseText;
                                  trigger_result(series_id);
                                  trigger_result(series_id);
                          },
                          parameters: {cmd:'delete_mediaobject', object_id:object_id}
        });
        $('mediaobject_response').innerHTML = '<pre>deleting mediaobject...</pre>';
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load editor for all objects with specified cou_id                         */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*
>> Rigt now this is just an idea
>> Maybe something like this might be usefull sometimes...
mediaobjecteditor.load_cou = function(id) {
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('cou_editor_pane').innerHTML = r.responseText;
                      },
                      parameters: {cmd:'get_couobjecteditor', id:id}
                    });
}
*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Save data for all mediaobjects with one cou_id                            */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*
>> Rigt now this is just an idea
>> Maybe something like this might be usefull sometimes...
mediaobjecteditor.save_cou = function() {
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                            $('cousavebutton').disabled = true;
                      },
                      parameters: {cmd:'save_cou_object', 
                                   id:$('object_id').value, 
                                   record: r = Object.toJSON($('cou_object_editor').serialize(true))}
    });
}
*/



/*****************************************************************************/
/*****************************************************************************/
/* Playlisteditor                                                            */
/*****************************************************************************/
/*****************************************************************************/

playlisteditor = Class.create();

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Member variable to stroe series and assigned mediaobjects for search      */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.series_mediaobjects = new Object();

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Open playlisteditor for a new playlist. Remove the sections for adding    */
/* and modifying of playlistentries.                                         */
/*                                                                           */
/* params:                                                                   */
/*   series_id {identifier of the series the playlist should be assigned to} */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.add = function(series_id) {
    editortype = 'playlist';
    $('stage').innerHTML = loadingHTML;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          // first: remove entryeditor
                          var endEd = r.responseText.indexOf('<input type="button" id="deletebutton"');
                          if (endEd > 0)
                              r.responseText = r.responseText.truncate(endEd, '') + '</td></tr></table></form>';

                          // second: replace button text
                          r.responseText = r.responseText.replace(/save playlist \(not entries\)/, 'add playlist');

                          // third: change action (load playlisteditor after saving)
                          r.responseText = r.responseText.replace(/onclick=\"playlisteditor.save\(\)\"/, 
                              'onclick="playlisteditor.save(); serieseditor.load(' + series_id + ');"');

                          // last: insert editor html
                          $('stage').innerHTML = r.responseText;
                      },
                      parameters: {cmd:'get_empty_playlisteditor', series_id:series_id}
    });
    playlisteditor.get_series_mediaobjects();
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load editor for secified playlist                                         */
/*                                                                           */
/* params:                                                                   */
/*   playlist_id  {identifier of the playlist to load}                       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.load = function(playlist_id) {
    editortype = 'playlist';
    $('stage').innerHTML = loadingHTML;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('stage').innerHTML = r.responseText;
                      },
                      parameters: {cmd:'get_playlisteditor', playlist_id:playlist_id}
    });
    playlisteditor.get_series_mediaobjects();
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Save playlist, but without entries                                        */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.save = function() {

    var series_id = $('reciever_id').value;
    var old_series_id = $('old_series_id').innerHTML;
    var keepSeries = (series_id == old_series_id) || (old_series_id = '');
    if (!old_series_id) 
        old_series_id = series_id;
    if (keepSeries || confirm('Are you shure you want to change the series?')) {
        new Ajax.Request( lf_url, {
                          method: 'post',
                          onSuccess: function(r) {
                              if ($('playlist_response'))
                                  $('playlist_response').innerHTML = r.responseText;
                              try {
                                  trigger_result(old_series_id);
                                  trigger_result(series_id);
                              } catch (err) {}
                          },
                          parameters: {cmd:'save_playlist', record: r = Object.toJSON($('fields').serialize(true))}
        });
        $('playlist_response').innerHTML = '<pre>saving all playlist data...</pre>';
        $('savebutton').disabled = true;
    }

}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Close opened editor for new playlistentries and reset it                  */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.closeentryeditor = function() {
    
    $('add_entry_response').innerHTML = '';
    $('new_entry_editor').style.display = 'none';
    $('new_entry_fields').reset();
    $('new_index_position').value = $('max_index_position').innerHTML;
    playlisteditor.generate_seriesoptions(playlisteditor.series_mediaobjects, 'new_object_id', '', '');
    
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Add a new entry to the opened playlist                                    */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.addentry = function() {
    // check input
    if ($('new_index_position').value == '') {
        alert('You must specify a position!');
        $('new_index_position').focus();
        return;
    }
    if ($('new_object_id').value == '') {
        alert('You must specify a mediaobject!');
        $('new_object_id').focus();
        return;
    }

    // get index for next editorcall
    new_max_index = 1 + parseInt(
            $('max_index_position').innerHTML > $('new_index_position').value 
                ? $('max_index_position').innerHTML 
                : $('new_index_position').value
        );

    // send data
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                              if (r.responseText.match(/<tr /)) {
                                  newEntry = document.createElement('table');
                                  newEntry.innerHTML = r.responseText;
                                  trNode = newEntry.getElementsByTagName('tr')[0];
                                  $('entry_list_end').parentNode.insertBefore(trNode, $('entry_list_end'));
                                  // hide and reset editor
                                  playlisteditor.closeentryeditor();
                                  $('max_index_position').innerHTML = new_max_index;
                                  $('new_index_position').value = new_max_index;
                              } else {
                                  $('add_entry_response').innerHTML = r.responseText;
                              }
                          },
                      parameters: {cmd:'add_playlistentry', record: r = Object.toJSON($('new_entry_fields').serialize(true))}
    });
    $('add_entry_response').innerHTML = '<pre>inserting playlistentry...</pre>';
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Save playlist including all entries                                       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.saveall = function() {
    // save playlist data
    playlisteditor.save();
    
    // Entries -> JSON
    var entries = $('playlist_entries').getElementsByTagName('tr');
    var es = new Array();
    for (var i = 0; i < entries.length; i++) {
        var entry_fields = entries[i].getElementsByTagName('input');
        if (entry_fields.length > 0) {
            var e = new Hash();
            for (var j = 0; j < entry_fields.length; j++) {
                if ( entry_fields[j].parentNode.getElementsByTagName('div')[0]
                  && (entry_fields[j].parentNode.getElementsByTagName('div')[0].innerHTML != entry_fields[j].value) 
                  && (entry_fields[j].name) )
                    e.set(entry_fields[j].name, entry_fields[j].value);
                else if (entry_fields[j].name == 'object_id')
                    e.set('object_id', entry_fields[j].value);
            }
            entry_fields = entries[i].getElementsByTagName('select');
            for (var j = 0; j < entry_fields.length; j++) {
                if ( entry_fields[j].parentNode.getElementsByTagName('div')[0]
                  && (entry_fields[j].parentNode.getElementsByTagName('div')[0].innerHTML != entry_fields[j].value) )
                    e.set(entry_fields[j].name, entry_fields[j].value);
            }
            if (e.values().size() > 1)
                es.push(e);
        }
    }
    entries = Object.toJSON( new Hash( { playlist_id:$('playlist_id').value, entries:es } ) );
    
    // send data
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                              $('playlist_entry_response').innerHTML = r.responseText;
                              trigger_result($('old_series_id').innerHTML);
                              trigger_result($('reciever_id').value);
                      },
                      parameters: { cmd: 'save_all_playlist', 
                                    entries: entries }
    });
    $('playlist_entry_response').innerHTML = '<pre>saving all playlist entries...</pre>';
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Delete a specified playlist entry                                         */
/*                                                                           */
/* params:                                                                   */
/*   playlist_id  {identifier of the playlist the entry is assigned to}      */
/*   object_id    {identifier of the mediaobject the entry is assigned to}   */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.delete_entry = function(playlist_id, object_id) {
     if (confirm('Are you shure you want to delete this playlistentry?')) {
        new Ajax.Request( lf_url, {
                          method: 'post',
                          onSuccess: function(r) {
                                  if (r.responseText == 'SUCCESS') {
                                      var entry = $('entry_' + object_id);
                                      entry.parentNode.removeChild(entry);
                                  } else
                                      alert(r.responseText);
                          },
                          parameters: {cmd:'delete_playlistentry', playlist_id:playlist_id, object_id:object_id}
        });
    }   
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Delete playlist including all entries                                     */
/*                                                                           */
/* params:                                                                   */
/*   playlist_id  {identifier of the playlist to remove}                     */
/*   series_id    {Identifier of the series the playlist is assigned to}     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.remove = function(playlist_id, series_id) {
    if (confirm('Are you shure you want to delete this playlist including all entries?')) {
        new Ajax.Request( lf_url, {
                          method: 'post',
                          onSuccess: function(r) {
                                  $('stage').innerHTML = r.responseText;
                                  trigger_result(series_id);
                                  trigger_result(series_id);
                          },
                          parameters: {cmd:'delete_playlist', playlist_id:playlist_id}
        });
        $('playlist_entry_response').innerHTML = '<pre>deleting playliat...</pre>';
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* apply search pattern on series-mediaobjects-structure and                 */
/* fill a HTML-select with the result.                                       */
/*                                                                           */
/* params:                                                                   */
/*   data           {series_mediaobjects-structure},                         */
/*   select_id      {identifier of HTML-Select-object to fill},              */
/*   ser_search_str {search pattern for series},                             */
/*   obj_search_str {search pattern for mediaobjects}                        */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.generate_seriesoptions = function(data, select_id, ser_search_str, obj_search_str) {
    
    if (!$(select_id))
        return;

    if (!data)
        return;

    $(select_id).innerHTML = '';

    var ser_regex = ser_search_str ? new RegExp( RegExp.escape(ser_search_str) , 'i') : new RegExp();
    var obj_regex = obj_search_str ? new RegExp( RegExp.escape(obj_search_str) , 'i') : new RegExp();
    for(var s in data) {
        if( typeof data[s] != 'function' ) {
            if ( !ser_search_str || ser_regex.test(data[s].name) ) {
                var grp = document.createElement('optgroup');
                var opt_count = 0;
                grp.setAttribute('label', data[s].name);
                grp.setAttribute('title', data[s].name);
                for(var o in data[s].obj) {
                    if( typeof data[s].obj[o] != 'function' ) {
                        if ( !obj_search_str || obj_regex.test(data[s].obj[o].title) ) {
                            var opt = document.createElement('option');
                            opt.setAttribute('value', o);
                            opt.setAttribute('title', data[s].obj[o].desc);
                            opt.appendChild(document.createTextNode(data[s].obj[o].title));
                            grp.appendChild(opt);
                            opt_count++;
                        }
                    }
                }
                if (opt_count > 0)
                    $(select_id).appendChild(grp);
            }
        }
    }

    
    
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Get series-mediaobjects-structure from database and write it to the       */
/* playlisteditor member variable series_mediaobjects.                       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.get_series_mediaobjects = function() {
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                           playlisteditor.series_mediaobjects = r.responseText.evalJSON();
                           /*
                                STRUCTURE:
                                'series_mediaobjects' -> series_id -> 'name'
                                                                   -> 'obj' -> object_id -> 'title'
                                                                                         -> 'desc'
                                                                                         -> 'date'
                           */
                           playlisteditor.generate_seriesoptions(playlisteditor.series_mediaobjects, 'new_object_id', '', '');
                      },
                      parameters: {cmd:'get_series_mediaobjects'}
                    } );
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Trigger mediaobject-search in 200ms and cancel old searches.              */
/* Basically this is to prevent the browser to start x searches if the user  */
/* enters a word with x characters but to do one search after the word is    */
/* typed completely.                                                         */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.trigger_new_object_series_search = function() {

    try {
        window.clearInterval(new_object_series_search_thread);
    } catch(e) {}
    new_object_series_search_thread = window.setInterval('playlisteditor.new_object_series_search();', 200);

}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Start the mediaobject-search with the values of the editor for new        */
/* playlistentries.                                                          */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
playlisteditor.new_object_series_search = function() {
    
    playlisteditor.generate_seriesoptions(
            playlisteditor.series_mediaobjects,
            'new_object_id',
            $('new_object_series_search').value,
            $('new_object_search').value
        );
    window.clearInterval(new_object_series_search_thread);
    new_object_series_search_thread = null;
        
}


/*****************************************************************************/
/*****************************************************************************/
/* Recordeditor                                                              */
/*****************************************************************************/
/*****************************************************************************/

recordeditor = Class.create();

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Add a new record (this means: clear all fields)                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
recordeditor.add = function() {
    
    document.fields.reset();

}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Delete selected record                                                    */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
recordeditor.remove = function() {

    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          document.fields.reset();
                          $('record_select').innerHTML = r.responseText;
                      },
                      parameters: {
                          cmd:'delete_record', 
                          type:editortype, 
                          record: r = Object.toJSON($('fields').serialize(true))
                      }
    });

}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load selected record                                                      */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
recordeditor.dublicate = function() {

    id = $('record_select').value;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          var obj = r.responseText.evalJSON();
                          for (var key in obj) {
                              var elm = document.getElementById(key);
                              elm.value = elm.getAttribute('readonly') ? '' : obj[key];
                          }
                          $('savebutton').disabled = false;
                      },
                      parameters: {cmd:'get_record', type:editortype, id:id}
    });

}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load selected record                                                      */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
recordeditor.load_record = function() {

    id = $('record_select').value;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          var obj = r.responseText.evalJSON();
                          for (var key in obj) {
                            var elm = document.getElementById(key);
                            elm.value = obj[key];
                          }
                          $('savebutton').disabled = true;
                      },
                      parameters: {cmd:'get_record', type:editortype, id:id}
    });

}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Save current record                                                       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
recordeditor.save = function() {
    //$('stage').innerHTML = loadingHTML;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                              $('record_select').innerHTML = r.responseText;
                      },
                      parameters: {
                          cmd:'save_record', 
                          type:editortype, 
                          record: r = Object.toJSON($('fields').serialize(true))
                      }
    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Enable savebutton                                                         */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
recordeditor.toggle_savebutton = function() {
    
    $('savebutton').disabled = false;

}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Reload current record                                                     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
recordeditor.refresh_record_select = function() {
    
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('record_select').innerHTML = r.responseText;
                      },
                      parameters: {
                          cmd:'get_option_list', 
                          type:editortype, 
                          supress_none_option:true
                      }
    });

}




/*****************************************************************************/
/*****************************************************************************/
/* Serieseditor                                                              */
/*****************************************************************************/
/*****************************************************************************/

serieseditor = Class.create();

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load serieseditor with specified series                                   */
/*                                                                           */
/* params:                                                                   */
/*   id  {identifier of the series to load}                                  */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
serieseditor.load = function(id) {
    editortype = 'series';
    current_id = id;
    $('stage').innerHTML = loadingHTML;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('stage').innerHTML = r.responseText;
                      },
                      parameters: {
                          cmd:'get_serieseditor', 
                          id:id
                      }
    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Load seriescreator                                                        */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
serieseditor.create = function(id) {
    editortype = 'series';
    current_id = id;
    $('stage').innerHTML = loadingHTML;
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('stage').innerHTML = r.responseText;
                          serieseditor.getLastRecordings(10, false);
                          $('term_id').selectedIndex = $('term_id').length - 1;
                      },
                      parameters: {
                          cmd:'get_seriescreator' 
                      }
    });
}

serieseditor.getLastRecordings = function( count, withoutSeries ) {
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('mediaobjectselector').innerHTML = r.responseText;
                      },
                      parameters: {
                          cmd:'get_last_recordings',
                          count:count,
                          withoutseries:withoutSeries
                      }
    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Save new mediaobject (seriescreator)                                      */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
serieseditor.save_new = function() {
    // alert( Object.toJSON($('fields').serialize(true)) );
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          if (r.responseText == 'OK')
                              serieseditor.create();
                          else
                              alert( r.responseText );
                      },
                      parameters: {
                          cmd:'save_new_series', 
                          record: r = Object.toJSON($('fields').serialize(true))
                      }
    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Save currently opened series                                              */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
serieseditor.save = function() {
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                            $('savebutton').disabled = true;
                      },
                      parameters: {
                          cmd:'save_series', 
                          id:$('series_id').value, 
                          record: r = Object.toJSON($('fields').serialize(true))
                      }
    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Remove a lecturer from the currently opened series                        */
/*                                                                           */
/* params:                                                                   */
/*   lecturer_id  {identifier of the lecturer to remove}                     */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
serieseditor.remove_lecturer = function(lecturer_id) {
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('lecturers').innerHTML = r.responseText;
                      },
                      parameters: {
                          cmd:'series_remove_lecturer', 
                          id:lecturer_id
                      }
    });
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Add lecturer to the currently opened series                               */
/*                                                                           */
/* params:                                                                   */
/*   lecturer_id  {identifier of the lecturer to add}                        */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
serieseditor.add_lecturer = function(lecturer_id) {
    new Ajax.Request( lf_url, {
                      method: 'post',
                      onSuccess: function(r) {
                          $('lecturers').innerHTML = r.responseText;
                          hide_select_window();
                      },
                      parameters: {
                          cmd:'series_add_lecturer', 
                          lecturer_id:lecturer_id, 
                          series_id:current_id
                      }
    });
}


